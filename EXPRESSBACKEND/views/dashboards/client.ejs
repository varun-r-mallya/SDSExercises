<!DOCTYPE html>
<html>
<head>
    <title>Client Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        body {
            background-color: #000;
            color: #03ff0f;
            font-family: 'Courier New', monospace;
        }
        .container {
            margin-top: 20px;
        }
        .form-control {
            background-color: #000000;
            color: #ffffff;
            
            border: 1px solid #fff;
        }
        .form-control::placeholder {
            color: #a3a3a3;
        }
        .form-control:focus {
            background-color: #000000;
            color: white;
        }
        .btn-primary {
            background-color: #007bff;
            border-color: #007bff;
        }
        .btn-primary:hover {
            background-color: #0069d9;
            border-color: #0062cc;
        }
        .chart {
            height: 40vh;
            background-color: #333;
            color: #fff;
            padding: 5%;
        }
        .separator {
            display: flex;
            justify-content: space-between;
            align-items: center;
            gap: 5%;
        }
        #buttoncontainer {
            position: fixed;
            bottom: 2%;
            left: 2%;
            z-index: 9999;
            display: flex;
            gap: 5%;
        }
        #transactions{
            overflow: scroll;
            overflow-x: hidden;
            width: 100%;
            height: 40vh;
            background-color: #333;
            color: #fff;
            padding: 5%;


        }
        
        .card-body {
            background-color: #252525;
            color: #fff;
            border-radius: 1%;
        }
        .card-title{
            text-decoration: none;
        }
        .card-text{
            text-decoration: none;
        }
        .explore {
            display: flex; 
            flex-wrap: wrap;
            gap: 1%;
        }

        /* delete if it does not work */
        .autocomplete {
            position: relative;
            display: inline-block;
        }

        #myInput {
            border: 1px solid transparent;
            background-color: #252525;
            padding: 1%;
            font-size: 1.2rem;
        }
        .autocomplete-items {
            position: absolute;
            border: 1px solid #d4d4d4;
            border-bottom: none;
            border-top: none;
            z-index: 99;
            /*position the autocomplete items to be the same width as the container:*/
            top: 100%;
            left: 0;
            right: 0;
            }

            .autocomplete-items div {
            padding: 10px;
            cursor: pointer;
            background-color: #292929; 
            border-bottom: 1px solid #d4d4d4; 
            }

            /*when hovering an item:*/
            .autocomplete-items div:hover {
            background-color: #2e2e2e; 
            }

            /*when navigating through the items using the arrow keys:*/
            .autocomplete-active {
            background-color: DodgerBlue !important; 
            color: #fcfcfc; 
            }
    </style>
</head>
<body>
    <div id="stars"></div>
    <div class="container">
        <div class="separator">
            <h1>Client Dashboard</h1>
            <form class="d-flex" role="search" id="searchbar">
                <div class="autocomplete" style="width:300px;">
                    <input id="myInput" type="text" class="form-control me-2" type="search" placeholder="Search" aria-label="Search" autocomplete="off">
                </div>
                <button class="btn btn-outline-success" type="submit">Search</button>
            </form>
        </div>
        <div class="row">
            <div class="col-md-6">
                <br>
                <h2> Transaction History</h2>
                <div id="transactions">
                    <% for(let i = 0; i < transactions.length; i++) { %>
                        <a href="/client/viewbook?search=<%=transactions[i].BookName%>">
                            <div class="card" style="background-color: #333; color: #fff; margin-bottom: 10px;">
                                <div class="card-body">
                                    <h5 class="card-title" style="color:#03ff0f"><%=transactions[i].BookName%></h5>
                                    <p class="card-text" style="color:#2fe0ff">Author: <%=transactions[i].Author%></p>
                                    <% if (transactions[i].CheckOutAccepted === 1) { %>
                                        
                                        <p class="card-text" style="color:#a218ff">Borrowed on: <%=transactions[i].DateBorrowed%></p>
                                    <% } else {%>
                                        <p class="card-text" style="color:#ffffff">Check Out Status: Not accepted</p>
                                    <% } %>
                                    <% if (transactions[i].CheckInAccepted === 1) { %>
                                        <p class="card-text" style="color:#a218ff">Returned on: <%=transactions[i].DateReturned%></p>
                                    <% } else {%>
                                        <p class="card-text" style="color:#ffffff">Check In Status: Not accepted</p>
                                    <% } %>
                                    <p class="card-text" style="color:#ffffff">Time in days for return: <%=transactions[i].NumberofDays%></p>
                                </div>
                            </div>
                        </a>
                    <% } %>
                </div>
            </div>
            <div class="col-md-6">
                <br>
                <h2>Library Statistics</h2>
                <div class="chart">
                    <canvas id="myChart"></canvas>
                </div>
            </div>
        </div>
        <br />
        <br />
        <div class="separator">
            <div class="container2" style="display: flex; flex-direction: column;">
                <h2>Explore</h2>
                <div class="explore">
                    <% for(let i = 0; i < displayList.length; i++) { %>
                        <a href="/client/viewbook?search=<%=displayList[i].BookName%>" class="card-link">
                            <div class="card" style="background-color: #333; color: #fff; margin-bottom: 10px;">
                                <div class="card-body">
                                    <h5 class="card-title" style="color:#03ff0f"><%=displayList[i].BookName%></h5>
                                    <p class="card-text" style="color:#2fe0ff">Author: <%=displayList[i].Author%></p>
                                    <p class="card-text" style="color:#ffffff">Genre: <%=displayList[i].Genre%></p>
                                    <p class="card-text" style="color:#ffffff">Number of Copies: <%=displayList[i].NumberofCopiesAvailable%></p>
                                </div>
                            </div>
                        </a>
                    <% } %>
                </div>
            </div>
        </div>
    </div>
    <div id="buttoncontainer">
    <a class="btn btn-primary logout-button" id="logoutbutton">Logout</a>
    <a class="btn btn-danger" id="adminbutton" onclick="AdminAccess()">Request Admin Access</a>
    </div>
</body>
<script>
        function AdminAccess() {
            fetch('/client/previleges', {
                method: 'POST'
            }).then(async function(response) {
                if (response.ok) {
                    await response.json().then((message) => {
                        alert(message.message);       
                    })
                }
                else {
                    alert('Request failed');
                }
            });
        }
        const ctx = document.getElementById('myChart');
        const data = {
        labels: [
            'Total Books',
            'Total Borrowed Books',
            'Total Available Books'
        ],
                                        
        datasets: [{
            label: 'Booklist',
            data: [Number("<%=NumberofCopies%>"), Number("<%=NumberofCopiesBorrowed%>"), Number("<%=NumberofCopiesAvailable%>")],
            backgroundColor: [
            'rgb(255, 99, 132)',
            'rgb(54, 162, 235)',
            'rgb(255, 205, 86)'
            ],
            hoverOffset: 4
        }]
        };
        new Chart(ctx, {
            type: 'doughnut',
            data: data,
            options: {
                responsive: true,
                maintainAspectRatio: false,
                cutout: '50%',
            }
        });
    function deleteAllCookies() {
        document.cookie.split(';').forEach(cookie => {
            const eqPos = cookie.indexOf('=');
            const name = eqPos > -1 ? cookie.substring(0, eqPos) : cookie;
            document.cookie = name + '=;expires=Thu, 01 Jan 1970 00:00:00 GMT';
        });
    }

    document.getElementById('logoutbutton').addEventListener('click', function() {
        fetch('/logout', {
            method: 'POST'
        }).then(function(response) {
            if (response.ok) {
                deleteAllCookies();
                window.location.href = '/';
                
            }
        });
    });

    document.getElementById('searchbar').addEventListener('submit', function(e) {
        e.preventDefault();
        const search = document.getElementById('myInput').value;
        window.location.href = `/client/viewbook?search=${search}`;
    });



// AUTOCOMPLETE FUNCTIONALITY


    function autocomplete(inp, arr) {
  /*the autocomplete function takes two arguments,
  the text field element and an array of possible autocompleted values:*/
  var currentFocus;
  /*execute a function when someone writes in the text field:*/
  inp.addEventListener("input", function(e) {
      var a, b, i, val = this.value;
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      if (!val) { return false;}
      currentFocus = -1;
      /*create a DIV element that will contain the items (values):*/
      a = document.createElement("DIV");
      a.setAttribute("id", this.id + "autocomplete-list");
      a.setAttribute("class", "autocomplete-items");
      /*append the DIV element as a child of the autocomplete container:*/
      this.parentNode.appendChild(a);
      /*for each item in the array...*/
      for (i = 0; i < arr.length; i++) {
        /*check if the item starts with the same letters as the text field value:*/
        if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
          /*create a DIV element for each matching element:*/
          b = document.createElement("DIV");
          /*make the matching letters bold:*/
          b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
          b.innerHTML += arr[i].substr(val.length);
          /*insert a input field that will hold the current array item's value:*/
          b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
          /*execute a function when someone clicks on the item value (DIV element):*/
          b.addEventListener("click", function(e) {
              /*insert the value for the autocomplete text field:*/
              inp.value = this.getElementsByTagName("input")[0].value;
              /*close the list of autocompleted values,
              (or any other open lists of autocompleted values:*/
              closeAllLists();
          });
          a.appendChild(b);
        }
      }
  });
  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}


var books =  "<%=booklist %>".split(",");


autocomplete(document.getElementById("myInput"), books);

</script>
</html>